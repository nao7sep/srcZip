================================================================================
    srcZip の古いコードを引き継ぐ
================================================================================

[完了] レポジトリーをクローン
[完了] レポジトリーを作成
[完了] .git ディレクトリーなどを非表示にする
[完了] ソリューションを作成
[完了] .gitignore を作る
[完了] プロパティーをチェック
[完了] 全てのファイルをチェック
[完了] いったんコミット（繰り返す）
[完了] アセンブリー情報を設定
[完了] taskKiller のログを更新（繰り返す）
[完了] [7/22] いったんコミット（繰り返す）
[却下] 多言語化
[完了] 古いコードを流し込む
[完了] API 的に使えるコードを Shared サブディレクトリーに入れる
[完了] Nekote 着手後の共通仕様を大まかに適用

    srcZip は、数週間前にノリでパッと書いたもの。その後、Nekote に着手したことにより、何となくの共通仕様のようなものが生じ始めている。一応は新しいプログラムとしてレポジトリーに載せて今後もメンテするので、全体の構造なども近付ける。

    --------------------------------------------------------------------------------

    fileDel 同様、こちらもノリでパッと書いたコードなので元々の品質が低く、全体的に整えたが、イマイチしっくりこない。

[完了] 全てのファイルを全体的に軽く再チェック

    エラーメッセージが Console への直接出力だったり、例外クラスの message だったりする。後者も上位で拾われて表示されるので情報量は十分。テストしたところ、情報の表示される順序に違和感を覚えたが、これも機能性は低下させない。

[却下] 各部でエラーメッセージを早めに出す

    投げて上位で表示する設計が安定している。

[完了] コメント
[完了] 全ての throw をチェック
[完了] 時差やロケールが影響しないのを確認
[完了] 引数としてのパスを各所でチェック

    Main/Preprocess/Scan がよく見ている。

[完了] Preprocess/Scan でのエラーに対処

    上位が対処するのを確認。

[完了] Trim を検索
[完了] 不要な ! と ? を探す
[完了] 落ちるところがないようにする
[完了] テスト

    全てのメッセージの表示を確認した。

[完了] 全プロジェクトでディレクトリー作成前に存在をチェック
[完了] Add 前に Contains が呼ばれているかチェック

    全ての Add の前後をチェックした。一部では、そこに流れ込むデータに重複がないことが保証されていて、さらなる重複チェックが不要だった。

[完了] internal を検索
[完了] アーカイブの設定ファイルを入れる
[却下] 1\2/3 でファイルを除外できるようにする

    Windows はパスの区切り文字として \ と / の両方をサポートするが、Mac/Linux は / のみ。

    Path.AltDirectorySeparatorChar Field (System.IO) | Microsoft Docs
    https://docs.microsoft.com/en-us/dotnet/api/system.io.path.altdirectoryseparatorchar

    Delete や Copy はパスの照合を伴わない処理なので、Windows では、.NET のメソッドに到達さえすれば成功する。

    唯一失敗するのは Exclude である。ここにたとえば 1\2/3 を指定すると、GetDirectories/GetFiles が返すインスタンス内のパスとの、文字列としての比較が一致せず、除外に失敗する。

    ただ、これは中途半端な対処になる。Exclude で \ と / が同一視されるようにしても、Mac/Linux では Delete や Copy に \ が通らない。そういったこと全てに対処し、Windows でも Mac/Linux でも srcZip.txt 内に \ と / を混在させられるようにすることの利益が乏しい。

    そのため、srcZip.txt では / しか使えないのを仕様とする。

[却下] Windows でも Mac でも動くようにする

    めんどくさい。まだ Mac で全く開発していないため急がない。

[却下] Mac でテスト
[完了] rel/abs/src/dir を検索
[完了] [8/2] いったんコミット（繰り返す）
[完了] README.md を書く
[完了] メンバー変数の宣言のところに空行を入れる

    最近は、プロパティーと同様の書き方にしている。

[完了] [8/2] taskKiller のログを更新（繰り返す）
[完了] アーカイブ
[完了] [8/9] いったんコミット（繰り返す）
[完了] バイナリーを配置
[完了] README.md を修正

    なくてよい未確認の情報を消す。些細なことだが、他のプロジェクトと整合させる。となると、アーカイブとの整合性も考える必要があるので、README.md しか変更点がないが、0.2 としてアーカイブする。

[完了] メモ

    タスクリストのこれまでのログと整合させるため「アーカイブ」などを入れて Done にすることを考えたが、いつ頃どのバージョンが作られ、どういった変更が行われたかは、GitHub を見ても、アーカイブを展開して差分を取ってもすぐに分かる。
